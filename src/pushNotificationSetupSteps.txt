Firebase push notification

Web ma project create and native configuration:

firebase.google.com site open karo

Ama go to console 

In console add new project (it will create new project)

Configure project with android and iOS

Android:
Get your package name(application Id/bundle id) inside android/app/build.gradle

Add this package name in side android app register and register your app

Now download google-service.json and then put this file inside android/app/

Inside android/build.gradle paste the following line in dependency at the end
classpath 'com.google.gms:google-services:4.4.1'

Inside android/app/build.gradle add following line for plugin 
apply plugin: 'com.google.gms.google-services'

And inside dependency add the following lines
implementation platform('com.google.firebase:firebase-bom:33.0.0')
 implementation 'com.google.firebase:firebase-analytics'

iOS: 
First do cd ios and pod install in vs code terminal 
Add app and select iOS 

Register with proper bundle id from Xcode project sign in and capability tab
Download GoogleService-Info file and place it inside your iOS project(under info.plist)

In AppDelegate.mm file add following code:

#import <Firebase.h>

Inside didFinishLaunchingWithOptions function under self.moduleName add following code
[FIRApp configure];

Add capability(right side top + button)
In that select push notification

=============================================

React native configuration:

Open this site: https://rnfirebase.io/messaging/usage

Install package

@react-native-firebase/app
@react-native-firebase/messaging
@notifee/react-native

For background mode add following code in index.js
// for background and quite mode push notification
messaging().setBackgroundMessageHandler(async remoteMessage => {
  console.log('Message handled in the background!', remoteMessage);
});


For foreground mode add following code inside App.tsx
 import 'react-native-gesture-handler';
import {Alert, StyleSheet, Text, View} from 'react-native';
import React, {useEffect} from 'react';
import messaging from '@react-native-firebase/messaging';
import notifee, {EventType} from '@notifee/react-native';
import {getFCMToken} from './src/utils/FCMService';
import {createStackNavigator} from '@react-navigation/stack';
import {NavigationContainer} from '@react-navigation/native';
import Home from './src/screens/Home';
import Profile from './src/screens/Profile';
import Setting from './src/screens/Setting';

export const navigationRef = React.createRef();

export function navigate(name, params) {
  navigationRef.current?.navigate(name, params);
}

const Stack = createStackNavigator();

const App = () => {
  useEffect(() => {
    notifee.requestPermission();
    getFCMToken();
    // for forground mode push notification
    const unsubscribe = messaging().onMessage(async remoteMessage => {
      console.log(
        'A new FCM message arrived!',
        JSON.stringify(remoteMessage, 0, 2),
      );
      // Create a channel (required for Android)
      const channelId = await notifee.createChannel({
        id: 'default',
        name: 'Default Channel',
      });

      // Display a notification
      await notifee.displayNotification({
        title: remoteMessage?.notification?.title,
        body: remoteMessage?.notification?.body,
        android: {
          channelId,
          // pressAction is needed if you want the notification to open the app when pressed
          pressAction: {
            id: 'default',
          },
        },
      });

      // if app is in forground state and opened from notification
      notifee.onForegroundEvent(({type, detail}) => {
        switch (type) {
          case EventType.PRESS:
            if (remoteMessage?.data?.redirectTo == 'profile') {
              navigationRef.current?.navigate('Profile');
            } else if (remoteMessage?.data?.redirectTo == 'setting') {
              navigationRef.current?.navigate('Setting');
            }
            break;
        }
      });
    });

    // if app is in background state and opened from notification
    messaging().onNotificationOpenedApp(remoteMessage => {
      if (remoteMessage) {
        if (remoteMessage?.data?.redirectTo == 'profile') {
          navigationRef.current?.navigate('Profile');
        } else if (remoteMessage?.data?.redirectTo == 'setting') {
          navigationRef.current?.navigate('Setting');
        }
      }
    });

    // if app is in quite state and opened from notification
    messaging()
      .getInitialNotification()
      .then(remoteMessage => {
        setTimeout(() => {
          if (remoteMessage) {
            if (remoteMessage?.data?.redirectTo == 'profile') {
              navigationRef.current?.navigate('Profile');
            } else if (remoteMessage?.data?.redirectTo == 'setting') {
              navigationRef.current?.navigate('Setting');
            }
          }
        }, 500);
      });

    return unsubscribe;
  }, []);

  return (
    <NavigationContainer ref={navigationRef}>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={Home} />
        <Stack.Screen name="Profile" component={Profile} />
        <Stack.Screen name="Setting" component={Setting} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default App;

const styles = StyleSheet.create({
  container: {flex: 1, alignItems: 'center', justifyContent: 'center'},
});
